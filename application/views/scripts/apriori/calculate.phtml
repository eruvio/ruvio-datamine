<style type="text/css">
    .progress {
        margin-bottom: 2px;
    }
    .bar {
        text-overflow: visible;
    }

    .bar p {
        width: 100%;
    }
    .dataTables_length {
        float: right;
        margin-top: 25px;
    }
    .paging_bootstrap {
        margin-top: -20px !important;
    }
</style>
<script type="text/javascript">
    $(document).ready(function(){
        
        jQuery.extend( jQuery.fn.dataTableExt.oSort, {
            "percent-pre": function ( a ) {
                var x = (a == "-") ? 0 : a.replace( /%/, "" );
                return parseFloat( x );
            },
 
            "percent-asc": function ( a, b ) {
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            },
 
            "percent-desc": function ( a, b ) {
                return ((a < b) ? 1 : ((a > b) ? -1 : 0));
            }
        } );
        
        function naturalSort (a, b) {
            var re = /(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?$|^0x[0-9a-f]+$|[0-9]+)/gi,
            sre = /(^[ ]*|[ ]*$)/g,
            dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
            hre = /^0x[0-9a-f]+$/i,
            ore = /^0/,
            // convert all to strings and trim()
            x = a.toString().replace(sre, '') || '',
            y = b.toString().replace(sre, '') || '',
            // chunk/tokenize
            xN = x.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
            yN = y.replace(re, '\0$1\0').replace(/\0$/,'').replace(/^\0/,'').split('\0'),
            // numeric, hex or date detection
            xD = parseInt(x.match(hre)) || (xN.length != 1 && x.match(dre) && Date.parse(x)),
            yD = parseInt(y.match(hre)) || xD && y.match(dre) && Date.parse(y) || null;
            // first try and sort Hex codes or Dates
            if (yD)
                if ( xD < yD ) return -1;
            else if ( xD > yD )  return 1;
            // natural sorting through split numeric strings and default strings
            for(var cLoc=0, numS=Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
                // find floats not starting with '0', string or 0 if not defined (Clint Priest)
                var oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc]) || xN[cLoc] || 0;
                var oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc]) || yN[cLoc] || 0;
                // handle numeric vs string comparison - number < string - (Kyle Adams)
                if (isNaN(oFxNcL) !== isNaN(oFyNcL)) return (isNaN(oFxNcL)) ? 1 : -1;
                // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
                else if (typeof oFxNcL !== typeof oFyNcL) {
                    oFxNcL += '';
                    oFyNcL += '';
                }
                if (oFxNcL < oFyNcL) return -1;
                if (oFxNcL > oFyNcL) return 1;
            }
            return 0;
        }
 
        jQuery.extend( jQuery.fn.dataTableExt.oSort, {
            "natural-asc": function ( a, b ) {
                return naturalSort(a,b);
            },
 
            "natural-desc": function ( a, b ) {
                return naturalSort(a,b) * -1;
            }
        } );
        
        $('a[data-toggle="tooltip"]').tooltip();
        $('#associationRules').dataTable(
        {
            "aoColumns": [
                null,
                { "sType": "percent" },
                null,
                null,
                { "sType": "natural" },
                { "sType": "natural" },
                { "sType": "natural" },
                null
            ],
            "sDom": 'lrt<"bottom"i<"clear">p>',
            		"sPaginationType": "bootstrap",
		"oLanguage": {
			"sLengthMenu": "_MENU_ records per page"
		}
        });
        $('<h2 style="float:left;">Association Rules</h2>').insertBefore('.dataTables_length');

    });
    

    
</script>
<h4> - Number of Transactions: <?php echo $this->numberTransactions; ?></h4>
<h4> - Support Threshold: <?php echo $this->supportDesired . ' (' . $this->supportDesired * 100 . '%)' ?></h4>
<h4> - Minimum Support: <?php echo $this->minimumSupport; ?></h4>
<h4> - Minimum Confidence: <?php echo $this->minimumConfidence . ' (' . $this->minimumConfidence * 100 . '%)'; ?></h4>

<hr/>
<?php
foreach ($this->apriori as $level) {
    echo $this->renderLevel($level);
}
?>
<br/><br/>
<?php
echo $this->renderAssociationRules($this->associationRules, $this->minimumConfidence);
?>